# This file contains site-specific settings for the configure scripts.
# It can be used to specify options that are otherwise given to the
# configure script as command line arguments or environment variables.
#
# This file must be located either in $prefix/share or $prefix/etc, where
# prefix is the installation location.  By default $prefix is /usr/local.
# Alternatively, one can set the environment variable CONFIG_SITE to the full
# path to this file.
#
# This template file also serves as documentation for many available
# configure options for COIN-OR projects.  Please be aware of the following
# conventions that translate the command line format into the one for the
# config.site file:
#
#   Command line version                config.site version
#
#   --with-NAME1-NAME2                  with_NAME1_NAME2=yes
#   --with-NAME1-NAME2="VALUE"          with_NAME1_NAME2="VALUE"
#   --without-NAME1-NAME2               with_NAME1_NAME2=no
#   --enable-NAME1-NAME2                enable_NAME1_NAME2=yes
#   --enable-NAME1-NAME2="VALUE"        enable_NAME1_NAME2="VALUE"
#   --disable-NAME1-NAME2               enable_NAME1_NAME2=no
#
# Here, "NAME1-NAME2" is some string corresponding to a particular option;
# note that dashes (-) are converted into underscores(_).  VALUE is the
# string that is the actual argument to an option.
# Other variables that are directly assigned in the configure command line,
# such as CXX=g++, are also written in this way in the config.site file.
#
# Note:  This is a /bin/sh script, setting variables.  There must be no
# space between "=" and the value, and if required, a quotation must be
# used.
#
# In the following we show some arguments for configure that can be used
# for the COIN-OR configure scripts.


##########################################################################
#                      Compiler choices and flags                        #
##########################################################################

# C, C++, Fortran 77, and Fortran 90 compiler names
#CC=gcc
#CXX=g++
#F77=gfortran
#FC=gfortran

# Compiler options, overwriting configure's default choice
#CFLAGS='-O3 -pipe'
#CXXFLAGS='-O3 -pipe'
#FFLAGS='-O3 -pipe'
#FCFLAGS='-O3 -pipe'

# Additional compiler options that are added to configure's default
# choice
#ADD_CFLAGS='-pg'
#ADD_CXXFLAGS='-pg'
#ADD_FFLAGS='-pg'
#ADD_FCFLAGS='-pg'

# Additional preprocessor definitions
#CDEFS='-DZEROFAULT'
#CXXDEFS='-DZEROFAULT'

# If you are using MPI, it is best to specify the underlying
# compiler for the configure script in CC/CXX (so that it can figure out
# the default compiler options and test them), but then to tell the
# configure script the actual MPI compiler (wrapper) using the
# following variable   (TODO does this still work?)
#MPICC='mpicc'
#MPICXX='mpiCC'
#MPIF77='mpif77'

# If a project's library is generated from C++, but the compilers used
# for linking is a C or Fortran compiler, one has to provide this
# compilers with the C++ runtime libraries.  configure tries to guess
# these, if they are not specified via the following variable:
#CXXLIBS='-lstdc++ -lm'


# Enabling MSVS mode
# This changes a number of checks to look only for MS or Intel compilers
# on Windows (cl, icl, ifort), ensure the use of the `compile` and
# `ar-lib` scripts, etc.
# It is recommended to set this if cl/icl/ifort should be used to prevent
# a mix of MS/Intel and GNU compilers, which usually does not work.
#enable_msvc=yes


##########################################################################
#                    Utility programs and their options                  #
##########################################################################

# Program for creating and extracting archives
#AR=ar

# Program for listing symbols in a binary
#NM=nm


##########################################################################
#          Flags for setting compilation and configuration modes         #
##########################################################################


##### DEBUG COMPILATION

# Switch on debug compilation. This changes the default compiler flags to
# disable compiler optimization and enable debug symbols. You may also want
# to disable shared library building (see below).
#enable_debug=yes

# Some projects can make use of a project-specific "checklevel".  It
# depends on the project developers, if and how this is used.  The level
# checklevel is specified with the --with-PROJECT-checklevel, where
# PROJECT is the lower-case string of the project name.  For Ipopt,
# this looks like
#with_ipopt_checklevel=1

# Some projects can make use of a project-specific "verbosity" level.
# It depends on the project developers, if and how this is used.  The
# level checklevel is specified with the --with-PROJECT-verbosity,
# where PROJECT is the lower-case string of the project name.  For
# Ipopt, this looks like
#with_ipopt_verbosity=1


##### CREATING SHARED VS. STATIC LIBRARIES

# By default, shared libraries are produced (if supported).
# This behavior can be changed using the following options:

# disable shared mode: compile every library as static
#enable_shared=no

# disable static mode: compile every library as shared
#enable_static=no

# enable shared mode: compile always a shared library (possibly in
# addition to a static one)
#enable_shared=yes

# enable shared mode: compile always a static library (possibly in
# addition to a shared one)
#enable_static=yes

# Enabling static mode does not prevent that the libraries and executable
# that are build depend on shared libraries. To achieve this, the -static
# flag needs to be passed to the linker. Since libtool also has an own
# -static flag (with a different meaning), extra effort is necessary to
# ensure that libtool passes -static to the linker.
#enable_shared=no
#LDFLAGS=-static
#LT_LDFLAGS=-all-static

# even when building static libraries, PIC (position-independent code)
# is enabled by default; as this is not always necessary, one may also
# disable this via
#with_pic=no


##### RELOCATABLE pkg-config FILES

# The generated pkg-config files (.pc) include the $prefix as absolute path.
# Since this prevents moving an installed package to a different location,
# one can enable that the prefix in a .pc file should be assumed to be
# relative to the location of the .pc file. This assumes that libdir
# has not been overwritten.
#enable_relocatable=yes


##### VERBOSE BUILD OUTPUT

# The actual libtool and compiler calls are suppressed by default. One can
# enable this when calling make by passing the option `V=1`, or change the
# default in the Makefiles by disabling silent Makefile rules:
#enable_silent_rules=no


##########################################################################
#                           Build Dependencies                           #
##########################################################################

# Use the following if we want to disable the use of GNU packages.
#enable_readline=no
#enable_gmp=no

# Use the following if we want to disable the use compression libraries.
#enable_zlib=no
#enable_bzlib=no

# To use other packages, such as LP solvers or other COIN-OR projects,
# one may need to specify the compiler and linker flags, i.e., to find
# header files or to link against a library, if the default mechanisms
# of a project are not sufficient.  This is done with the
# --with-LIB-cflags and --with-LIB-lflags configure flags, where "LIB" is
# replaced by the lower-case short-form of the library.

# For CPLEX, one might set the following:
#with_cplex_cflags='-I/path/to/ilcplex'
#with_cplex_lib='-L/path/to/cplex/lib/static_pic -lcplex -lpthread -lm -ldl'

# For Lapack, the configure script will try a few default locations.
# If this is not sufficient, one may specify the linker flags for Lapack
# via a configure option. Since no header files are necessary for Lapack,
# one may use --with-lapack instead of --with-lapack-lflags:
#with_lapack="-L$HOME/lib -lmylapack"

# To disable the check for a certain library, use --without-LIB, which
# in a config.site file translates to with_LIB=no, e.g.,
#with_lapack=no
#with_osi=no
